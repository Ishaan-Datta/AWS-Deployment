# new:
apiVersion: kops.k8s.io/v1alpha2
kind: Cluster
metadata:
  creationTimestamp: "2020-09-03T21:24:06Z"
  name: useast1.dev.pykey.com
spec:
  api:
    dns: {}
  authorization:
    rbac: {}
  channel: stable
  cloudProvider: aws
  configBase: s3://clusters.dev.pykey.com/useast1.dev.pykey.com
  containerRuntime: docker
  etcdClusters:
  - cpuRequest: 200m
    etcdMembers:
    - instanceGroup: master-us-east-1a
      name: a
    memoryRequest: 100Mi
    name: main
  - cpuRequest: 100m
    etcdMembers:
    - instanceGroup: master-us-east-1a
      name: a
    memoryRequest: 100Mi
    name: events
  iam:
    allowContainerRegistry: true
    legacy: false
  kubelet:
    anonymousAuth: false
  kubernetesApiAccess:
  - 0.0.0.0/0
  kubernetesVersion: 1.18.8
  masterInternalName: api.internal.useast1.dev.pykey.com
  masterPublicName: api.useast1.dev.pykey.com
  networkCIDR: 172.20.0.0/16
  networking:
    kubenet: {}
  nonMasqueradeCIDR: 100.64.0.0/10
  sshAccess:
  - 0.0.0.0/0
  subnets:
  - cidr: 172.20.32.0/19
    name: us-east-1a
    type: Public
    zone: us-east-1a
  - cidr: 172.20.64.0/19
    name: us-east-1b
    type: Public
    zone: us-east-1b
  - cidr: 172.20.96.0/19
    name: us-east-1c
    type: Public
    zone: us-east-1c
  topology:
    dns:
      type: Public
    masters: public
    nodes: public

---
# node group instance:
apiVersion: kops.k8s.io/v1alpha2
kind: InstanceGroup
metadata:
  creationTimestamp: "2020-09-01T23:17:45Z"
  labels:
    kops.k8s.io/cluster: useast1.dev.pykey.com
  name: nodes
spec:
  image: 099720109477/ubuntu/images/hvm-ssd/ubuntu-focal-20.04-amd64-server-20200716
  machineType: t3.medium
  maxSize: 2
  minSize: 2
  nodeLabels:
    kops.k8s.io/instancegroup: nodes
  role: Node
  subnets:
  - us-east-1a
  - us-east-1b
  - us-east-1c    


# apiVersion: kops.k8s.io/v1alpha2
# kind: Cluster
# metadata:
#   name: example.k8s.local
# spec:
#   cloudProvider: aws
#   kubernetesVersion: 1.24.0

#   # Network CIDR and topologies
#   networkCIDR: 10.0.0.0/16
#   networkID: vpc-abcdef1234567890
#   topology:
#     masters: public
#     nodes: public
#     dns:
#       type: Public

#   # Subnets Configuration
#   subnets:
#     - name: us-east-1a
#       zone: us-east-1a
#       cidr: 10.0.0.0/24
#     - name: us-east-1b
#       zone: us-east-1b
#       cidr: 10.0.1.0/24
#     - name: us-east-1c
#       zone: us-east-1c
#       cidr: 10.0.2.0/24

#   # Security Groups and Network Resources
#   network:
#     kubeProxy:
#       enabled: true
#     kubeDNS:
#       enabled: true

#   # Master Node Configuration
#   masters:
#     - instanceType: t3.medium
#       rootVolumeSize: 32
#       subnets:
#         - us-east-1a

#   # Worker Nodes Configuration
#   nodes:
#     - instanceType: t3.nano
#       rootVolumeSize: 32
#       subnets:
#         - us-east-1b
#         - us-east-1c

#   # Add-ons Configuration
#   additionalPolicies:
#     node: |
#       [
#         {
#           "Effect": "Allow",
#           "Action": ["ec2:Describe*"],
#           "Resource": ["*"]
#         }
#       ]

#   # Load Balancer Configuration
#   api:
#     loadBalancer:
#       type: Public
#       sslCertificate: arn:aws:acm:us-east-1:123456789012:certificate/your-certificate-id

#   # SSH Access
#   sshAccess:
#     - 0.0.0.0/0

#   # IAM and Authentication
#   iam:
#     allowContainerRegistry: true
#     legacy: false

#   # Terraform Output
#   terraform:
#     version: "0.13.5"

#   # S3 State Store
#   configBase: s3://your-kops-state-store/example.k8s.local

#   # DNS Configuration
#   dnsZone: Z1D633PJN98FT9

#   # SSH Key Configuration
#   sshKeyName: your-ssh-key

# instance group master:
# apiVersion: kops.k8s.io/v1alpha2
# kind: InstanceGroup
# metadata:
#   name: master-us-east-2a
#   labels:
#     kops.k8s.io/cluster: example.k8s.local
# spec:
#   role: Master
#   image: 099720109477/ubuntu/images/hvm-ssd/ubuntu-focal-20.04-amd64-server-20230502
#   machineType: t3.medium
#   minSize: 1
#   maxSize: 1
#   subnets:
#     - us-east-2a
#   instanceMetadata:
#     httpPutResponseHopLimit: 1
#     httpTokens: required

# instance group nodes:
# apiVersion: kops.k8s.io/v1alpha2
# kind: InstanceGroup
# metadata:
#   name: nodes
#   labels:
#     kops.k8s.io/cluster: example.k8s.local
# spec:
#   role: Node
#   image: 099720109477/ubuntu/images/hvm-ssd/ubuntu-focal-20.04-amd64-server-20230502
#   machineType: t3.nano
#   minSize: 2
#   maxSize: 4
#   subnets:
#     - us-east-2a
#     - us-east-2b
#     - us-east-2c
#   instanceMetadata:
#     httpPutResponseHopLimit: 1
#     httpTokens: required

# test idk
# apiVersion: kops.k8s.io/v1alpha2
# kind: Cluster
# metadata:
#   name: example.k8s.local  # Replace with your cluster name
# spec:
#   cloudProvider: aws
#   kubernetesVersion: 1.24.0

#   # Network settings
#   networkCIDR: 10.0.0.0/16
#   networkID: vpc-abcdef1234567890  # Replace with your VPC ID
#   topology:
#     masters: public
#     nodes: public
#     dns:
#       type: Public

#   # Subnet configuration
#   subnets:
#     - name: us-east-2a
#       zone: us-east-2a
#       cidr: 10.0.0.0/24
#     - name: us-east-2b
#       zone: us-east-2b
#       cidr: 10.0.1.0/24
#     - name: us-east-2c
#       zone: us-east-2c
#       cidr: 10.0.2.0/24

#   # API server configuration
#   api:
#     loadBalancer:
#       type: Public  # Change to Internal if you need an internal API LB

#   # SSH access
#   sshAccess:
#     - 0.0.0.0/0  # Replace with specific CIDR block for security

#   # IAM and access control
#   iam:
#     allowContainerRegistry: true
#     legacy: false

#   # Terraform configuration
#   terraform:
#     version: "0.13.5"  # Adjust Terraform version if needed

#   # S3 state store
#   configBase: s3://your-kops-state-store/example.k8s.local  # Replace with your S3 bucket

#   # DNS Zone
#   dnsZone: Z1D633PJN98FT9  # Replace with your Route 53 Hosted Zone ID

#   # SSH Key
#   sshKeyName: your-ssh-key  # Replace with your SSH key name

# new master
# apiVersion: kops.k8s.io/v1alpha2
# kind: InstanceGroup
# metadata:
#   name: master-us-east-2a
#   labels:
#     kops.k8s.io/cluster: example.k8s.local  # Ensure this matches your cluster name
# spec:
#   role: Master
#   image: 099720109477/ubuntu/images/hvm-ssd/ubuntu-focal-20.04-amd64-server-20230502  # Update AMI if necessary
#   machineType: t3.medium
#   minSize: 1
#   maxSize: 1
#   subnets:
#     - us-east-2a
#   instanceMetadata:
#     httpPutResponseHopLimit: 1
#     httpTokens: required

# new instance group:
# apiVersion: kops.k8s.io/v1alpha2
# kind: InstanceGroup
# metadata:
#   name: nodes
#   labels:
#     kops.k8s.io/cluster: example.k8s.local  # Ensure this matches your cluster name
# spec:
#   role: Node
#   image: 099720109477/ubuntu/images/hvm-ssd/ubuntu-focal-20.04-amd64-server-20230502  # Update AMI if necessary
#   machineType: t3.nano
#   minSize: 2
#   maxSize: 4
#   subnets:
#     - us-east-2a
#     - us-east-2b
#     - us-east-2c
#   instanceMetadata:
#     httpPutResponseHopLimit: 1
#     httpTokens: required
